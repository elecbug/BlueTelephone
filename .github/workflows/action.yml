name: Build and Release

on:
  push:
    branches:
      - master  # master 브랜치에 푸시할 때 트리거

jobs:
  Build-CS:
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '8.x'  # 사용하는 .NET Core 버전

      - name: Restore dependencies
        run: dotnet restore

      - name: Build C# Project
        run: dotnet build --configuration Release --no-restore

      - name: Test C# Project
        run: |
          dotnet test --no-build --verbosity normal
          mkdir cs
          copy BlueTelephone\bin\Release\net8.0-windows\* cs
      - name: Upload C# Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: csharp-build
          path: |
            cs\*

  Build-Go:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'  # 사용하는 Go 버전

      - name: Build Go Program
        run: |
          cd background  # Go 프로그램이 있는 디렉토리로 이동
          go build -o blue-telephone-d.exe  # Go 프로그램 빌드
          copy blue-telephone-d.exe ..

      - name: Upload Go Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: go-build
          path: blue-telephone-d.exe
          
  Release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: [Build-CS, Build-Go]  # C#과 Go 빌드가 모두 완료된 후에 실행

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get the latest commit message
        id: get_commit_message
        run: echo "COMMIT_MESSAGE=$(git log -1 --pretty=%B)" >> $GITHUB_ENV

      - name: Set Release Tag and Name
        id: set_release_info
        run: |
          if [[ "${{ env.COMMIT_MESSAGE }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            echo "RELEASE_TAG=$(echo ${{ env.COMMIT_MESSAGE }} | grep -o '^v[0-9]\+\.[0-9]\+\.[0-9]\+')" >> $GITHUB_ENV
            echo "RELEASE_NAME=BlueTelephone-${{ env.RELEASE_TAG }}" >> $GITHUB_ENV
          fi

      - name: Stop if commit message doesn't contain version
        if: env.RELEASE_TAG == ''
        run: echo "No version tag found in commit message. Skipping release."

      - name: Download C# Build Artifacts
        if: env.RELEASE_TAG != ''
        uses: actions/download-artifact@v4
        with:
          name: csharp-build
          path: cs

      - name: Download Go Build Artifacts
        if: env.RELEASE_TAG != ''
        uses: actions/download-artifact@v4
        with:
          name: go-build
          path: go

      - name: Prepare Release Folder
        if: env.RELEASE_TAG != ''
        run: |
          mkdir publish
          ls -l
          cp cs/* publish/
          cp go/* publish/

      - name: Install zip utility
        if: env.RELEASE_TAG != ''
        run: sudo apt-get install -y zip
        
      - name: Zip Release Files
        if: env.RELEASE_TAG != ''
        run: zip -r release.zip publish/*

      - name: Create Release
        if: env.RELEASE_TAG != ''
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          release_name: ${{ env.RELEASE_NAME }}
          draft: false
          prerelease: false

      - name: Upload Combined Release Asset
        if: env.RELEASE_TAG != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release.zip
          asset_name: release.zip
          asset_content_type: application/zip
